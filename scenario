#! /bin/bash

red=$'\e[1;31m'
grn=$'\e[1;32m'
blu=$'\e[1;34m'
end=$'\e[0m'

if [ "$1" = "-h" ] || [ "$#" -lt 2 ]; then
    printf "${red}usage: $0 (core | help) scenario p w i [0 ... | -a ] [--logfolder <path>]\n${end}"
    printf "${red}starts a scenario with prepare/initiate at all given nodes\n${end}"
    printf "${red}       params for scripts: p - preparations\n${end}"
    printf "${red}       params for scripts: w - watch-agents\n${end}"
    printf "${red}       params for scripts: i - initiate\n${end}"
    printf "\n"
    printf "${red}With help, a help text for the scenario will be printed.\n${end}"
    printf "\n"
    printf "${red}Return codes:\n${end}"
    printf "${red}    1: generic error\n${end}"
    printf "${red}    2: scenario nonexistant\n${end}"
    printf "${red}    3: no nodes found\n${end}"
    printf "${red}    4: simulation type not supported\n${end}"
    printf "${red}    10-19: error in Phase 0-9\n${end}"
    printf "${red}    130: script killed by ctrl-c\n${end}"
    exit
fi

if [ "$1" = "help" ]; then
	cat `readlink -e $2`/usage
    exit
fi

TYPE=$1
SCENARIO=$2
SCENARIO_FOLDER=`readlink -e $SCENARIO`
PREP_ARGS=$3
WATCH_ARGS=$4
INIT_ARGS=$5

###Build active nodes array and check if appendix argument is present
VARARGS=(${@:6})
for i in "${!VARARGS[@]}"; do
    if [ "${VARARGS[$i]}" = "--logfolder" ]; then
        LOCAL_LOG_FOLDER="${VARARGS[$((i+1))]}"
        break
    fi

    ACTIVE_NODES="$ACTIVE_NODES ${VARARGS[$(( $i - 3 ))]}"
done

LOG_FOLDER="/tmp/serval-monitor_tmp"
if [ -z ${LOCAL_LOG_FOLDER+x} ]; then LOCAL_LOG_FOLDER=$LOG_FOLDER-$SCENARIO-`date +%Y-%m-%d_%H-%M`; fi
mkdir -p $LOCAL_LOG_FOLDER

date_ms () { date +%s%3N; }
TIMING_FILE=$LOCAL_LOG_FOLDER/timing.csv
echo "timestamp_ms, phase, name" >> $TIMING_FILE

SEVERAL_ALL_SIDS_FILE="/tmp/serval-all-sids"
rm -f $SEVERAL_ALL_SIDS_FILE

# test if scenario is available
if [ ! -d "$SCENARIO" ]; then
    printf "${red}Error: Scenario $SCENARIO does not exist\n${end}"
    exit 2
fi
printf "${grn}## Running Scenario $SCENARIO\n"

NODES=()
if [ "$TYPE" == "core" ]; then
    while read N; do NODES=( "${NODES[@]}" "$N" ); done < <(find /tmp/ 2>/dev/null | grep pycore.*/n[0-9]*$ | sort -V)

    NODE_CNT=`find /tmp/ 2>/dev/null | grep pycore.*/n[0-9]*$ | wc -l`
    if [ "$NODE_CNT" == "0" ]; then
        printf "${red}Error: Couldn't find any core nodes\n${end}"
        exit 3
    fi

    printf "## Using Nodes "
    for NODE in ${NODES[@]}; do printf "`basename $NODE` "; done;

    exec_par () {
        PIDS=""
        FAIL="0"
        for N in $1; do
            vcmd -c ${NODES[$N]} -- sh -c "${@:2}" 1>&2 &
            PIDS="$PIDS $!"
        done
        for PID in $PIDS; do
            wait $PID || let "FAIL=$?"
            if [ "$FAIL" != "0" ]; then printf "${red}PID $PID failed with $FAIL, aborting scenario.\n${end}"; exit 1; fi
        done
    }

    exec_seq () {
        for N in $1; do
            vcmd -c ${NODES[$N]} -- sh -c "${@:2}"
            printf "\n"
        done
    }

    exec () { vcmd -c ${NODES[$(($1))]} -- sh -c "${@:2}"; }

else
    printf "${red}Error: Type $TYPE is not supported\n${end}"
    exit 4
fi

# ALL_NODES contains indices of all nodes for easier handling
ALL_NODES=`seq -s " " 0 $(( NODE_CNT - 1 ))`

# replacing -a option for all nodes
if [ "$ACTIVE_NODES" = " -a" ]; then
    ACTIVE_NODES="0"
    PERCENTAGE=50
else
    PERCENTAGE=5
fi
ACTIVE_NODE_CNT=`echo $ACTIVE_NODES | wc -w`
printf "\n${grn}## Active: ${ACTIVE_NODES[@]}\n${end}"


### PHASE 1
export PHASE=11
printf "${blu}## Phase 1 - Prepare: $SCENARIO_FOLDER/prepare $NODE_CNT $ACTIVE_NODE_CNT $PREP_ARGS\n${end}"
echo "`date_ms`, 1, prepare" >> $TIMING_FILE
exec_seq "$ACTIVE_NODES" "$SCENARIO_FOLDER/prepare $NODE_CNT $ACTIVE_NODE_CNT $PREP_ARGS"

### PHASE 2
export PHASE=12
echo "`date_ms`, 2, system-monitoring" >> $TIMING_FILE
printf "${blu}## Phase 2 - Starting system monitoring\n${end}"
exec_par "$ALL_NODES" "/serval-tests/monitor system"

## PHASE 3
export PHASE=13
printf "${blu}## Phase 3 - Generating SIDs and starting servald\n${end}"
echo "`date_ms`, 3, servald-start" >> $TIMING_FILE
exec_par "$ALL_NODES" 'export HOST=`hostname | cut -d u -f2 | sed -e "s/^0*//g"`; servald keyring add "" `printf "%2x" $((16+$HOST))` > /dev/null; servald start > /dev/null; sleep 2'

## PHASE 3.1
printf "${blu}## Phase 3 - Collecting serval sids and starting RPC servers\n${end}"
####################################################
#LEN=0
#for nn in $ALL_NODES; do
#    LEN=$(( LEN + 1 ))
#done
#TMP=$(( $LEN * $PERCENTAGE ))
#NUM_RPC_NODES=$(( $TMP / 100 ))
#RPC_NODES=`shuf --input-range=2-$LEN | head -${NUM_RPC_NODES}`
#
#exec_seq "$RPC_NODES" "servald id self" | grep -v "sid" | grep -v "^1$" | grep -v "^$" >> $SEVERAL_ALL_SIDS_FILE
#exec_par "$RPC_NODES" 'nohup bash -c "( rpc -l 1> /dev/null )" &' 1> /dev/null
####################################################

while [[ ! -s $SEVERAL_ALL_SIDS_FILE ]]; do
    exec_seq "31" "servald id self" | grep -v "sid" | grep -v "^1$" | grep -v "^$" >> $SEVERAL_ALL_SIDS_FILE
    sleep 1
done
exec_par "31" 'nohup bash -c "( rpc -l 1> /dev/null )" &' 1> /dev/null


### PHASE 4
export PHASE=14
printf "${blu}## Phase 4 - Starting servald monitoring\n${end}"
echo "`date_ms`, 4, servald-monitoring" >> $TIMING_FILE
exec_par "$ALL_NODES" "/serval-tests/monitor serval"

### PHASE 5
export PHASE=15
printf "${blu}## Phase 5 - Starting watch-agents: $SCENARIO_FOLDER/watch-agent $NODE_CNT $ACTIVE_NODE_CNT $WATCH_ARGS\n${end}"
echo "`date_ms`, 5, watch-agent-start" >> $TIMING_FILE

# using trap to kill running vcmds
trap "kill $AGENTS 2> /dev/null; echo Killed agents; exit 130" SIGINT SIGTERM

for NODE in $ALL_NODES; do
    exec $(( NODE - 1 )) "$SCENARIO_FOLDER/watch-agent $NODE_CNT $ACTIVE_NODE_CNT $WATCH_ARGS" &
    AGENTS="$AGENTS $!"
done

### PHASE 6
export PHASE=16
printf "${blu}## Phase 6 - Initiating Scenario: $SCENARIO_FOLDER/initiate $NODE_CNT $ACTIVE_NODE_CNT $INIT_ARGS\n${end}"
echo "`date_ms`, 6, initiate" >> $TIMING_FILE
exec_seq "$ACTIVE_NODES" "$SCENARIO_FOLDER/initiate $NODE_CNT $ACTIVE_NODE_CNT $INIT_ARGS"

### PHASE 7
export PHASE=17
printf "${blu}## Phase 7 - Waiting for agents:\n${end}"
echo "`date_ms`, 7, watch-agent-wait" >> $TIMING_FILE
for PID in $AGENTS; do
    wait $PID || printf "${red}  Watch-Agent $PID failed ($?).\n${end}"
done
echo

if [ "$FAIL" == "0" ]; then
    printf "${grn}## Phase 7 - watch-agents finished, sleeping 5 seconds to have a trailer in monitoring"
    for i in {1..5}; do printf "."; sleep 1; done; printf "\n${end}"
fi

### PHASE 8
export PHASE=18
printf "${blu}## Phase 8 - Stopping monitoring\n${end}"
echo "`date_ms`, 8, stop-monitoring" >> $TIMING_FILE
exec_par "$ALL_NODES" "/serval-tests/monitor stop; pkill -9 rpc 1> /dev/null; sleep 2; servald stop > /dev/null;"

### PHASE 9
export PHASE=19
printf "${blu}## Phase 9 - Data Collection:\n${end}"
echo "`date_ms`, 9, data-collection" >> $TIMING_FILE

mv $LOG_FOLDER/*/* $LOCAL_LOG_FOLDER
rm -rf $LOG_FOLDER

printf "${grn}## Scenario $SCENARIO done.\n${end}"
echo "`date_ms`, 10, finished" >> $TIMING_FILE
