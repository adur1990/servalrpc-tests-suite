#! /bin/bash
exec &> >(tee /tmp/.auto-scenario.log )

red=$'\e[1;7;31m'
grn=$'\e[1;7;32m'
blu=$'\e[1;7;34m'
end=$'\e[0m'

CORE_TOPO_PID=-1

exec_scenario () {
    printf "${grn}# Performing scenario: $@ \n${end}"
    printf "\n\n${end}"
    (eval ./scenario $@)
    ret=$?
    if [ $ret -eq 0 ]; then
        printf "${grn}# Scenario finished successfully!\n${end}"
    else
        printf "${red}# Scenario failed with return code $ret...\n`./scenario | tail -n-6`\n${end}"
    fi
    return $ret
}

initialize_topology () {
    printf "${blu}# Starting RPC scenario $1...\n${end}"
    python run_core_topology.py $1 &
    CORE_TOPO_PID=$!
    if [ $CORE_TOPO_PID -eq -1 ]; then
        printf "${red}# Initialization failed.\n${end}"
    else
        printf "${blu}# Waiting...!\n${end}"
        sleep 45
        printf "${grn}# RPC scenario started successfully!\n${end}"
    fi
    return $CORE_TOPO_PID
}

finalize_topology () {
    printf "${grn}# Iteration done, finalizing topology (PID: $CORE_TOPO_PID).\n${end}"
    kill -n 2 $CORE_TOPO_PID
    sleep 30
}
trap finalize_topology SIGINT

beautify_params () {
    for param in "$@"; do
        ret=$ret`eval echo $param- | sed "s/f /f./g; s/\ /_/g"`
    done
    echo -$ret
}

mapfile -t LINES <$1

AUTO_SCENARIO_START=`date +%Y-%m-%d_%H-%M`
AUTO_LOGFOLDER="/tmp/serval-monitor/${AUTO_SCENARIO_START}_$(basename ${1})"

trap rpc_runloop_exception_handler SIGUSR1
MAIN_PROCESS_PID=$$

printf "${blu}# Autorunning scenario configurations from $1, pid: $MAIN_PROCESS_PID\n${end}"

for line in "${LINES[@]}"; do
    if [[ $line == \#* ]]; then
	printf "${blu}# Skipping set: $line\n${end}"
	continue
    fi

    # configuration file line parsing
    OLDIFS=$IFS
    IFS=" " read -ra line_arr <<< "$line"
    len=${#line_arr[@]}
    env=${line_arr[0]}
    scenario=${line_arr[@]:1:$(( len-3 ))}
    params=${line_arr[@]:2:$(( len-4 ))}
    repeat=${line_arr[-2]:1:${#line_arr[-2]}}
    topology=${line_arr[-1]}

    printf "${blu}# Running set:   $env | $topology | $scenario | repeating $repeat times\n${end}"

    run=1
    while [ $run -le $repeat ]; do
        printf "${blu}# Iteration #$run: $env | $topology | $scenario\n${end}"
        scenarioname=${line_arr[1]}
        SCENARIO_LOGFOLDER=$AUTO_LOGFOLDER/$scenarioname-$env

        RUN_START=`date +%Y-%m-%d_%H-%M`
        SHORT_PARAMS=`eval beautify_params $params`

        export LOGFOLDER="$SCENARIO_LOGFOLDER/$topology-$scenarioname-$SHORT_PARAMS-run_`printf "%03g" $run`--$RUN_START"
        mkdir -p $LOGFOLDER
        echo "$line" > $LOGFOLDER/parameters.conf

        initialize_topology $topology
        exec_scenario $env $scenario --logfolder $LOGFOLDER |& tee $LOGFOLDER/scenario.log 2>&1

        finalize_topology

        mkdir -p $LOGFOLDER/netmon; mv /tmp/netmon* $_
        mv /tmp/*_server.csv $LOGFOLDER/active 2> /dev/null
        mv /tmp/*_client.csv $LOGFOLDER/active 2> /dev/null

        run=$(( run + 1 ))
    done
    rsync -a /tmp/serval-monitor/ /media/sf_Logs/
done

chmod -R 0777 /media/sf_Logs

printf "${grn}# Done autorunning scenario configurations from $1\n${end}"
